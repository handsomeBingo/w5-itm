.container {
	/* 声明 display grid 的元素即为 grid container ，作为直接的 grid-items 的容器，换言之 item 的 parent 是 container */
	/* container 的直接子元素为 grid item 直系子元素才是； */
	/* 构成网格的分割线称为 grid line。他们可以是垂直的（"列网格线"）或水平的（"行网格线"），位于行或列的任何一边都称为 grid line */
	/* 由网格线组成的密闭空间为 grid cell ，grid cell 是最小单元。*/
	/* 由连续两条相邻的grid line 构成的区域称为 grid track ；他可以是一整行或一整列，下面这个例子是由 row2 和 row3 构成 */
	/* 我们可以把 grid area 看做由 4 条 grid line 组成的封闭区域，grid area 可以由任何数量的 grid cell 组成 */
	display: grid;
	/*display: inline-grid;*/
	grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end]; /* 每个 auto=(total - fix_length) / auto_count */
	grid-template-rows: [row1-start] 188px [row1-end] 100px [third-line] auto [last-line];
}
.item {
	border: 1px solid rebeccapurple;
	height: 100px;
	box-sizing: border-box;
	background: aqua;
}

/*++++++++++++++++++++++++++++++++++++++++++++++GRID-父类的属性+++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

/* grid-template-columns/grid-template-rows 定义 grid 整体结构，行数、列数、行宽、列宽 */

/* 定义列 grid line：两个列线间的宽度为列宽，注意定义的列线不是列，两个列线间构成列
grid-template-columns [line-name] <track-size> [line-name] <track-size> .... [line-name]
*/

/* 定义行 grid-line 两个行线间为行的高度，注意是行分隔线，不是行，两个行线间构成一个行，如果 item 不设高度，会自动识别为 item 的高度；
grid-template-rows [line-name] <track-size> [line-name] <track-size>
*/

/* track-size 相邻两条行线或列线间距离，可以是长度，百分比或者比例 不可省略*/
/* line-name 可以给每一条行线或列线命名，方便在需要的地方引用，可省略；每条线可以有多个名字，空格隔开即可  */

/* TIPS1-使用 repeat(cols, width) */
.cntnr {
	grid-template-columns: repeat(3, 20px); /* 等价于 grid-template-columns: 20px 20px 20px; */
}

/* TIPS2: 使用 fr 控制比例，有时只想定义部分占空间比例，而不想给出具体长度，这对适配不同大小屏幕helps */
/* 1fr = (total_length - fixed_length ) / fr_count */
.cntnr2 {
	display: grid;
	grid-template-columns: 1fr 2fr 1fr; /* fr 间可以使用 px 如 ，1fr 50px 1fr 1fr*/
}

/* TIPS3: auto-fill 关键字；有时候不确定容器的大小，每个单元格长度固定，此时可用 auto-fill 自动填充*/
/* 排不下了会自动折行 */
.cntnr3 {
	display: grid;
	grid-template-columns: repeat(auto-fill, 100px);
}

/* TIPS4: minmax() 函数；通过用户指定的一个长度范围，表示长度就在这个范围中，他接受两个参数，分别为最小值和最大值，如下例子：*/
/* 100px<= 列宽 <=1fr ？这种布局很常见，what ？ */
.cntnr4 {
	display: grid;
	grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
}

/*------------------------------------------------------------------------------------------------*/
/* grid-template-areas 用来定义每个格子出现在哪个区域 */
/* 通过引用 grid-area 属性指定网络区域的名称来定义网格模板 */
/* 重复网格区域的名称会导致内容跨越这些单元格 */
/* .表示一个空单元格 */

.item-a {
	grid-area: header;
}
.item-b {
	grid-area: main;
}
.item-c {
	grid-area: sidebar;
}
.item-d {
	grid-area: footer;
}
.cntnr5 {
	display: grid;
	grid-template-columns: repeat(4, 100px);
	grid-template-rows: auto;
	grid-template-areas:
		"header header header header" /* 有相同的 grid-area 的列会合并成一行，. 表示空格子留白；有几个就有几个列，然后html的item引用的类名*/
		"main main . sidebar"
		"footer footer footer footer";
}

/*------------------------------------------------------------------------------------------------*/
/* grid-template 可以把 grid-template-rows/grid-template-columns/grid-template-areas 整合到一句声明 */
/* grid-template: <grid-template-rows> / <grid-template-columns>; */
.one {
	grid-area: one;
}
.two {
	grid-area: two;
}
.three {
	grid-area: three;
}

.cntnr6 {
	display: grid;
	grid-template: "one one one" 40px "two three three" 40px "tow three three" 40px / 1fr 1fr 1fr; /* /后面是 template-columns */
	column-gap: 10px;
	row-gap: 15px;
}

/*--------------------------------------column-gap,row-gap,gap--------------------------------------*/
/* column-gap, row-gap 用来指定网格线的大小。你可以把他想象成设置与行或列之间的宽度 */
/* row-gap <line-size> */
/* column-gap <line-size> */
/* gap 可以帮助我们同时指定 row-gap 和 col-gap，gap: <row-gap> <col-gap>，如果省略第二个值，浏览器默认其等于第一个值 */

.cntnr7 {
	grid-template-columns: 100px 100px 100px;
	grid-template-rows: 80px 80px 80px;
	column-gap: 10px;
	row-gap: 15px;
}


/*---------------------------------------------------------------------------------------------------------*/
/* justify-items,align-items,place-items */
/* justify-items 用于设置单元格内容的水平位置（左中右）*/
/* align-items 设置单元格内容的垂直位置（上中下）*/
/* place-items 是 align-items 和 justify-items 的合并简写 */
/* 注意此值对于网格内所有的项目都适用 */
/* start 元素位于单元格容器开头 */
/* end 元素位于单元格容器结尾 */
/* center 元素位于单元格容器中心 */
/* stretch 元素在单元格内被拉伸以适应容器 */




























